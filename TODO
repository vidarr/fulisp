* FAILING tests: test-eval, test-gc, test-reader, test-streams
* BUG: Parser: "" does not parse to empty string
* BUG:
    fuLisp:100$ (integer 541234513123124)
    eval.c: 41: Evaluating 
    eval.c: 42: Expr is (SYM: INTEGER int: -856)
    eval.c: 60: eval(): Got CONS cell
    eval.c: 61: Expr is SYM: INTEGER
    eval.c: 41: Evaluating 
    eval.c: 42: Expr is SYM: INTEGER
    eval.c: 49: eval(): Symbol - resolving it...
    eval.c: 64: eval(): Evaluated to
    eval.c: 65: Expr is FNC:  BR DG 40 00 00 00 00 00
    futypes.c: 80: Entering fuInt
    eval.c: 41: Evaluating 
    eval.c: 42: Expr is int: -856
    eval.c: 46: eval(): No symbol - evaluate to itself
    futypes.c: 82: fuFloat(): Evaluated to 
    futypes.c: 83: Expr is int: -856
    futypes.c: 90: fuInt(): Got INTEGER
        FUBAR: Canary has been overwritten while invoking sprintf(3)

* Call GC if out-of-mem occurs

* Introduce strategy to call GC regularely

* Optimize MARK_AND_SWEEP: Unmarking of all expressions necessary? 
                           Traverse hashmap using iterator

* expressionForceDispose: Should handle disposal of root environment 

* Introduce 2 new types: Reader/Writer

* Implement type cast functions within types.h/.c

* Implement functions:
  - /
  - eq (pointer equality)

* Introduce "default function" in environment that will be called if symbol
  could not be resolved

General Roadmap
===============


0.1.0   Initial version (done): Language core without side effects
0.2.0   Finish core language: 
        Basic functions with side effects implemented: set-car!, set-cdr!, begin
        Reader, Writer, variable argument lists with &REST
0.3.0   Optimizations: Cons cell data structure, preallocation of memory,
        activation records
0.4.0   Memory allocation rework: Replace ref counting by stop-and-copy
0.5.0   Introduce analysation phase: Implement head tail recursion,
        precalculation, etc...
0.6.0   Introduce macros
0.7.0   Introduce read macros


Done

* BUGFIX: (LAMBDA () (quote 1)) has to be called with at least one arg though it 
    does not require one

* Implement Dot-Notation in Reader ( '(A . B) ) 

* Implement support for variable arguments in lambda:
    Define special character ( '&' )
    If Symbol within argument list starts with this character, involve special
    treatment:
    - REST: Assign the remaining arguments as list to next symbol within
      argument list. If no more values given, assign the empty list
   (- OPTIONAL: If no more arguments given, assign the following variables NIL)

* Implement begin (using macros ?)

* Make set! to define and introduce set! that modifies existing variables only
  (currently, there is no possibility to alter variable on surrounding env, even
  if symbol is unbound in current env, because set! will just create it

* Distinguish (1 . 2) and (1 2) when printing expression.expression

* Make NIL a constant variable within expression.c, distinguish NIL from (struct
  Expression *)

* Merge config.h and fulispcfg.h

* Bind lambdaCreate to 'lambda' aymbol

* Work out reader test: Read in expressions, compare string print of reader
  result to expected strings

* Print out function pointers correctly

* Reader should parse '+' and '-' into symbol '+' resp. '-' and not int:0

* Error: Introduce error-handling function to be called by pointer.
         Allow setting custom error function

* Environment: Make all functions take an Environment struct
               Introduce Environment into reader

* Merge sub structures of Reader directly into Reader to save resolution of
        pointer

