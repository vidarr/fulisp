1
x
(quote ())
(quote (nil 1))
(define x 1)
x
(set! x 2)
x
(define y 1)
y
x
(define fac 2)
fac
(set! fac 3)
fac
(define fac 4)
fac
(define set-fac (lambda (fac) (set! fac fac)))
(set-fac 5)
fac
(define set-fac-2 (lambda (fac) (define fac fac)))
(set-fac-2 6)
fac
(define zero-arg (lambda () (quote 0)))
(zero-arg)
(define block-var 2)
(begin (set! block-var (+ block-var 1)) (set! block-var (+ block-var 1)) (set! block-var (+ block-var 1)))
block-var
(begin (set! block-var 5) (set! block-var (+ 1 block-var)) (set! block-var (* 2 block-var)))
block-var
(cons 1 2)
(cons (+ 1 2) 5)
(define cons-test (cons 1 2))
(set-car! cons-test 3)
cons-test
(set-cdr! cons-test 4)
cons-test
(+ 1 2) 
(+ 1 x)
(+ 1 y)
(+ x y)
x
y
(+ 1 2 3 4)
(+ x x x x x x x x y y x)
(/ 4 2)
(/ 24 3 4 2)
(/ 100 2 2 5 5)
(/ (* 2 2 2 2 2 2) (* (* 2 2) (* 2 2)))
(/ 2)
(/ 0)
(/ 24 (* 2 3 0))
(= 1 1)
(= 1 (+ 0 1))
(= 1 2)
(= (+ 1 1) 1)
(= 1 (+ 1 1))
(define inc1 (lambda (z) (+ 1 z)))
(inc1 1)
(inc1 2)
(inc1 3)
(define inc1-alt (lambda (x) (+ 1 x)))
(inc1-alt 2)
(inc1-alt 4)
(define  inc (lambda (x) (lambda (y) (+ x y))))
(set! inc1 (inc 1))
(inc1 19)
(inc1 22)
(quote a)
(quote (1 2))  
(define closure-test (lambda (init) (lambda (inc? b) (cond (inc?  (set! init (+ init b))) (t (set! init b))))))
(define closure13 (closure-test 13))
(closure13 t 3)
(closure13 t 4)
(closure13 nil 0)
(closure13 t 1)
(define closure-test2 (lambda (init) (lambda (choser) (cond (choser (lambda (x) (lambda (inc) (cond (inc (set! x (+ x 1))) (t (set! x init)))))) (t (lambda (x) (lambda (inc) (cond (inc (set! x (+ x 2))) (t (set! x init))))))))))
(define fun-gen (closure-test2 24))
(define increaser-1 (fun-gen t))
(define increaser-2 (fun-gen nil))
(define inc-1-100 (increaser-1 100))
(define inc-1-200 (increaser-1 200))
(inc-1-100 t)
(inc-1-200 t)
(inc-1-100 t)
(inc-1-200 t)
(inc-1-200 nil)
(inc-1-200 t)
(inc-1-100 t)
(define inc-2-900 (increaser-2 900))
(inc-2-900 t)
(inc-1-200 t)
(inc-1-100 t)
(inc-1-100 t)
(inc-1-100 t)
(inc-1-100 nil)
(inc-2-900 t)
(define test-rest (lambda (&rest a) (cond (a "TEST-REST: with rest") (t "TEST-REST: without rest"))))
(test-rest)
(test-rest 1)
(test-rest 1 2)
(test-rest 1 2 3 4 5)
(define test-rest-2 (lambda (&rest a) (cond ((not a) "TEST-REST-2: Without rest") (t a))))
(test-rest-2)
(test-rest-2 ("TEST-REST-2" "With rest"))
(define test-rest-3 (lambda (a &rest b) (cons a b)))
(test-rest-3 NIL)
(test-rest-3 NIL 1)
(test-rest-3 NIL 1 2 3)
(define test-rest-4 (lambda (a b &rest c) (cons (cons a b) c)))
(test-rest-4 1)
(test-rest-4 1 2)
(test-rest-4 1 2 10 11 12)
(define test-rest-5 (lambda (a b c d e &rest f) (cons (cons a (cons b (cons c (cons d e)))) f)))
(test-rest-5 1 2 3)
(test-rest-5 1 2 3 4)
(test-rest-5 1 2 3 4 5)
(test-rest-5 1 2 3 4 5 (cons 1 2))
(test-rest-5 1 2 3 4 5 (cons 1 2) 6)
(integer?)
(integer? 1)
(integer? 1 2 3 4)
(integer? 1.0)
(integer? 1.0 2 3 4)
(integer? 1 2.0 3 4)
(integer? 1 2 3 4.0)
(integer? 1.0 2.0 3 4)
(integer? 1.0 2 3 4.0)
(integer? 1 2 3 4.0)
(integer? 1.0 2.0 3.0 4.0)
(integer? 1 2 3 4 5 6 7 8.0 9 10)
(integer? 1 2 3 4 5 6 7 8   9 10)
(integer?     1.0)
(integer?     \c)
(integer?     *)
(integer?     "ab")
(integer?     (quote a))
(integer?     (cons 1 2))
(integer?     (lambda (x) (x)))
(float?       1)
(float?       1.0)
(float?       \c)
(float?       *)
(float?       "ab")
(float?       (quote a))
(float?       (cons 1 2))
(float?       (lambda (x) (x)))
(character?   1)
(character?   1.0)
(character?   \c)
(character?   *)
(character?   "ab")
(character?   (quote a))
(character?   (cons 1 2))
(character?   (lambda (x) (x)))
(native-function?   1)
(native-function?   1.0)
(native-function?   \c)
(native-function?   *)
(native-function?   "ab")
(native-function?   (quote a))
(native-function?   (cons 1 2))
(native-function?   (lambda (x) (x)))
(string?            1)
(string?            1.0)
(string?            \c)
(string?            *)
(string?            "ab")
(string?            (quote a))
(string?            (cons 1 2))
(string?            (lambda (x) (x)))
(symbol?            1)
(symbol?            1.0)
(symbol?            \c)
(symbol?            *)
(symbol?            "ab")
(symbol?            (quote a))
(symbol?            nil)
(symbol?            t)
(symbol?            (cons 1 2))
(symbol?            (lambda (x) (x)))
(cons?              1)
(cons?              1.0)
(cons?              \c)
(cons?              *)
(cons?              "ab")
(cons?              (quote a))
(cons?              (cons 1 2))
(cons?              (lambda (x) (x)))
(lambda?            1)
(lambda?            1.0)
(lambda?            \c)
(lambda?            *)
(lambda?            "ab")
(lambda?            (quote a))
(lambda?            (cons 1 2))
(lambda?     (lambda (x) (x)))
(type 1)
(type -2)
(type 3.1415)
(type \c)
(type "string")
(type :STRING)
(type (quote (a b)))
(type (lambda (x) (x)))
(type +)
(define injector (lambda () (define injected "injected" (get-parent-environment (get-environment)))))
(injector)
injected
(define overwrite-injected (lambda () (set! injected "overwritten" (get-parent-environment (get-environment)))))
(overwrite-injected)
injected
(integer 0)
(integer 1)
(integer -1)
(integer 13.0)
(integer -13.0)
(integer 13.1)
(integer 13.9)
(integer -13.1)
(integer -13.9)
(integer "1")
(integer "-1")
(integer "13.1")
(integer "-12.8")
(integer "test")
(float 1)
(float -2)
(float 3.4)
(float "5")
(float "-6")
(float "7.8")
(float "-9.0")
