1
x
(quote ())
(quote (nil 1))
(define x 1)
x
(set! x 2)
x
(define y 1)
y
x
(cons 1 2)
(cons (+ 1 2) 5)
(+ 1 2) 
(+ 1 x)
(+ 1 y)
(+ x y)
x
y
(+ 1 2 3 4)
(+ x x x x x x x x y y x)
(= 1 1)
(= 1 (+ 0 1))
(= 1 2)
(= (+ 1 1) 1)
(= 1 (+ 1 1))
(define inc1 (lambda (z) (+ 1 z)))
(inc1 1)
(inc1 2)
(inc1 3)
(define inc1-alt (lambda (x) (+ 1 x)))
(inc1-alt 2)
(inc1-alt 4)
(define  inc (lambda (x) (lambda (y) (+ x y))))
(set! inc1 (inc 1))
(inc1 19)
(inc1 22)
(cons? nil)  
(quote a)
(quote (1 2))  
(cons? (quote (1 q)))
(define closure-test (lambda (init) (lambda (inc? b) (cond (inc?  (set! init (+ init b))) (t (set! init b))))))
(define closure13 (closure-test 13))
(closure13 t 3)
(closure13 t 4)
(closure13 nil 0)
(closure13 t 1)
(define closure-test2 (lambda (init) (lambda (choser) (cond (choser (lambda (x) (lambda (inc) (cond (inc (set! x (+ x 1))) (t (set! x init)))))) (t (lambda (x) (lambda (inc) (cond (inc (set! x (+ x 2))) (t (set! x init))))))))))
(define fun-gen (closure-test2 24))
(define increaser-1 (fun-gen t))
(define increaser-2 (fun-gen nil))
(define inc-1-100 (increaser-1 100))
(define inc-1-200 (increaser-1 200))
(inc-1-100 t)
(inc-1-200 t)
(inc-1-100 t)
(inc-1-200 t)
(inc-1-200 nil)
(inc-1-200 t)
(inc-1-100 t)
(define inc-2-900 (increaser-2 900))
(inc-2-900 t)
(inc-1-200 t)
(inc-1-100 t)
(inc-1-100 t)
(inc-1-100 t)
(inc-1-100 nil)
(inc-2-900 t)

